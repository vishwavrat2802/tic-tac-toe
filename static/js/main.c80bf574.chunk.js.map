{"version":3,"sources":["components/header.js","components/Square.js","components/Board.js","components/Game.js","components/MainComponent.js","App.js","reportWebVitals.js","index.js"],"names":["header","props","className","Navbar","dark","color","NavbarBrand","href","square","onClick","value","Board","Square","squares","onclick","calculateWinner","lines","i","length","a","b","c","Game","state","Array","fill","xisNext","isNewGame","move","displayModal","isDraw","winner","result","toggleDisplayModal","bind","this","setState","console","log","name","switchPlayer","player1","player2","manageScore","manageGames","slice","Modal","isOpen","toggle","centered","ModalBody","next","message","firstPlayer","figure","displayWinner","scoreX","scoreO","handleClick","Component","Main","totalGames","isModalOpen","test","isWinner","baseState","toggleModal","handleSubmit","toggleWinnerModal","Button","outline","event","playerX","playerO","gameCount","preventDefault","ModalHeader","Form","onSubmit","FormGroup","Row","Label","htmlFor","md","Col","Input","type","id","innerRef","input","restartGame","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c80bf574.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, NavbarBrand} from \"reactstrap\";\r\n\r\nfunction header(props){\r\n    return(\r\n        <div className=\"App\">\r\n            <Navbar dark color=\"primary\">\r\n            <div className=\"container\">\r\n                <NavbarBrand href=\"/\">TIC-TAC-TOE</NavbarBrand>\r\n            </div>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\nexport default header;","import React from \"react\";\r\n\r\nfunction square(props){\r\n    return(\r\n        <div className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default square;","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nfunction Board(props){\r\n    return(\r\n        <>\r\n        <div className=\"container\">\r\n            <div className=\"boardback\">\r\n                <div className=\"gridview\">\r\n                    <div className=\"element\">\r\n                        <div className=\"text\">\r\n                            <Square value={props.squares[0]} onClick = {() => props.onclick(0)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mx-1 element\">\r\n                        <div className=\"text\">\r\n                            <Square value={props.squares[1]} onClick = {() => props.onclick(1)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"element\">\r\n                        <div className=\"text\">\r\n                            <Square value={props.squares[2]} onClick = {() => props.onclick(2)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"my-1 element\">\r\n                        <div className=\"text\">\r\n                            <Square value={props.squares[3]} onClick = {() => props.onclick(3)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mx-1 my-1 element\">\r\n                        <div className=\"text\">\r\n                            <Square value={props.squares[4]} onClick = {() => props.onclick(4)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"my-1 element\">\r\n                        <div className=\"text\">\r\n                            <Square value={props.squares[5]} onClick = {() => props.onclick(5)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"element\">\r\n                        <div className=\"text\">\r\n                            <Square value={props.squares[6]} onClick = {() => props.onclick(6)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mx-1 element\">\r\n                        <div className=\"text\">\r\n                            <Square value={props.squares[7]} onClick = {() => props.onclick(7)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"element\">\r\n                        <div className=\"text\">\r\n                            <Square value={props.squares[8]} onClick = {() => props.onclick(8)}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Board;","import React, {Component} from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Modal, ModalHeader, ModalBody, Button, Form, FormGroup, Label, Input, Row, Col } from \"reactstrap\";\r\nimport \"../css/BoardView.css\";\r\nimport Board from './Board';\r\n\r\nclass Game extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(9).fill(null),\r\n            xisNext: true,\r\n            isNewGame:true,\r\n            move: 0,\r\n            displayModal: true,\r\n            isDraw: false,\r\n            winner:null,\r\n            result: false\r\n        }\r\n        this.toggleDisplayModal=this.toggleDisplayModal.bind(this);\r\n    }\r\n\r\n    toggleDisplayModal(){\r\n        \r\n        this.setState({\r\n            displayModal: !this.state.displayModal,\r\n            result:true\r\n        });\r\n        if(calculateWinner(this.state.squares)){\r\n            console.log(\"Winner Declared\");\r\n            const name = (calculateWinner(this.state.squares) == \"X\" && this.props.switchPlayer) || (calculateWinner(this.state.squares) == \"O\" && !this.props.switchPlayer) ? this.props.player1: this.props.player2;\r\n            this.props.manageScore(name);\r\n        }\r\n        else if(this.state.move == 9){\r\n            console.log(\"Move Count\");\r\n            this.props.manageScore(null);\r\n        }\r\n        this.props.manageGames();\r\n    }\r\n\r\n    handleClick(i){\r\n        const squares= this.state.squares.slice();\r\n        if(calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xisNext ? 'X' : 'O';\r\n        this.setState({\r\n            squares: squares,\r\n            xisNext: !this.state.xisNext,\r\n            isNewGame: false,\r\n            move: this.state.move + 1\r\n        })\r\n    }\r\n    \r\n    displayWinner(winner){\r\n        if(winner){\r\n            return(\r\n                <Modal isOpen={this.state.displayModal} toggle={this.toggleDisplayModal} centered={true}>\r\n                    <ModalBody>\r\n                        <span>{winner} is winner</span>\r\n                        <div onClick={this.toggleDisplayModal}>Next</div>\r\n                    </ModalBody>\r\n                </Modal>\r\n            );\r\n        }\r\n        else if(this.state.move == 9){\r\n            return(\r\n                <Modal isOpen={this.state.displayModal} toggle={this.toggleDisplayModal} centered={true}>\r\n                    <ModalBody>\r\n                        <span>Game Draw</span>\r\n                        <div onClick={this.toggleDisplayModal}>Next</div>\r\n                    </ModalBody>\r\n                </Modal>\r\n            )\r\n        }\r\n        return(\r\n            <div></div>\r\n        )\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        const next = this.state.xisNext? \"X\" : \"O\";\r\n        let message = null;\r\n        if(this.props.player1){\r\n            const firstPlayer = this.props.switchPlayer? this.props.player1: this.props.player2;\r\n            message = this.state.isNewGame?  \"Game Started : First Turn: \" + firstPlayer : \"Next Turn : \" + next;\r\n        }\r\n\r\n        const figure = calculateWinner(this.state.squares);\r\n        let winner=null;\r\n        if(figure){\r\n            message = \"Game Ended\";\r\n            winner = (figure == \"X\" && this.props.switchPlayer) || (figure == \"O\" && !this.props.switchPlayer) ? this.props.player1:this.props.player2;\r\n        }\r\n\r\n        return(\r\n            <>  \r\n                {this.displayWinner(winner)}\r\n                <div className=\"container\">\r\n                    <div className=\"players\">\r\n                        <div className=\"float-left\"><span>{this.props.player1}</span><span>{this.props.scoreX}</span></div>\r\n                        <div className=\"float-right\"><span>{this.props.player2}</span><span>{this.props.scoreO}</span></div>\r\n                    </div>\r\n                </div>\r\n                <Board squares={this.state.squares} onclick = {(i) => this.handleClick(i)}/>\r\n                <div className=\"message\">\r\n                    {message}\r\n                </div>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\nexport default Game;","import React, { Component } from \"react\";\r\nimport { Modal, ModalHeader, ModalBody, Button, Form, FormGroup, Label, Input, Row, Col } from \"reactstrap\";\r\nimport Game from \"./Game\";\r\n\r\nclass Main extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            totalGames: 1,\r\n            player1: \"\",\r\n            player2: \"\",\r\n            isModalOpen: true,\r\n            test: \"\",\r\n            scoreX: 0,\r\n            scoreO: 0,\r\n            isWinner:true,\r\n            switchPlayer: 1\r\n\r\n        }\r\n\r\n        this.baseState = this.state;\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.manageScore = this.manageScore.bind(this);\r\n        this.manageGames=this.manageGames.bind(this);\r\n        this.toggleWinnerModal=this.toggleWinnerModal.bind(this);\r\n    }\r\n\r\n    \r\n    restartGame(){\r\n        if(this.state.totalGames == 0){\r\n            {console.log(\"Restart executed\")}\r\n            if(this.state.scoreX == this.state.scoreO){\r\n                return(\r\n                    <Modal isOpen={this.state.isWinner} centered={true}>\r\n                        <ModalBody>Game Overall Draw</ModalBody>\r\n                        <Button outline color=\"primary\" onClick={this.toggleWinnerModal}>Play Again</Button>\r\n                    </Modal>\r\n                )\r\n            }\r\n            else{\r\n                const winner = this.state.scoreX > this.state.scoreO ? this.state.player1 : this.state.player2;\r\n                return(\r\n                    <Modal isOpen={this.state.isWinner} centered={true}>\r\n                        <ModalBody>{winner} is the overall winner</ModalBody>\r\n                        <Button outline color=\"primary\" onClick={this.toggleWinnerModal}>Play Again</Button>\r\n                    </Modal>\r\n                )\r\n            }\r\n        }\r\n\r\n    }\r\n    toggleModal(){\r\n        this.setState({\r\n            isModalOpen:false\r\n        })\r\n    }\r\n\r\n    toggleWinnerModal(){\r\n        this.setState(this.baseState);\r\n    }\r\n\r\n    manageGames(){\r\n        console.log(\"Executed\");\r\n        this.setState({\r\n            totalGames: this.state.totalGames - 1\r\n        })\r\n    }\r\n\r\n    manageScore(winner){\r\n        if(winner){\r\n            console.log(winner);\r\n            if(this.state.player1 == winner){\r\n                this.setState({\r\n                    scoreX:this.state.scoreX+1,\r\n                })\r\n            }\r\n            else{\r\n                this.setState({\r\n                    scoreO:this.state.scoreO+1,\r\n                })\r\n            }\r\n        }\r\n        else{\r\n            console.log(\"Draw Score\");\r\n            this.setState({\r\n                scoreX: this.state.scoreX + 0.5,\r\n                scoreO: this.state.scoreO + 0.5\r\n            })\r\n        }\r\n        this.setState({\r\n            switchPlayer: !this.state.switchPlayer\r\n        })\r\n    }\r\n\r\n    handleSubmit(event){\r\n        this.toggleModal();\r\n        this.setState({\r\n            player1: this.playerX.value,\r\n            player2: this.playerO.value,\r\n            totalGames: this.gameCount.value\r\n        })\r\n        event.preventDefault();\r\n    }\r\n\r\n    players(player1,player2){\r\n        this.setState({\r\n            player1: player1,\r\n            player2: player2\r\n        })\r\n    }\r\n    render(){\r\n        console.log(this.state.totalGames);\r\n        return(\r\n            <>\r\n            <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal} centered={true}>\r\n                    <ModalHeader>New Game</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Label htmlFor=\"playerX\" md={4}>Player 1 : X</Label>\r\n                                    <Col md={8}>\r\n                                    <Input type=\"text\" id=\"playerX\" name=\"playerX\"\r\n                                    innerRef={(input) => this.playerX=input}\r\n                                    ></Input>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Label htmlFor=\"playerO\" md={4}>Player 2 : O</Label>\r\n                                    <Col md={8}>\r\n                                    <Input type=\"text\" id=\"playerO\" name=\"playerO\"\r\n                                    innerRef={(input) => this.playerO=input}\r\n                                    ></Input>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Label htmlFor=\"gameCount\" md={4}>Game Count: </Label>\r\n                                    <Col md={8}>\r\n                                    <Input type=\"number\" id=\"gameCount\" name=\"gameCount\"\r\n                                    innerRef={(input) => this.gameCount=input}\r\n                                    ></Input>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Start</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            <Game key={this.state.totalGames} player1={this.state.player1} player2={this.state.player2}\r\n                    manageGames={() => this.manageGames()}\r\n                    scoreX={this.state.scoreX}\r\n                    scoreO={this.state.scoreO}\r\n                    manageScore={(winner) => this.manageScore(winner)}\r\n                    switchPlayer={this.state.switchPlayer}\r\n                />\r\n                {this.restartGame()}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import './App.css';\nimport Header from './components/header';\nimport Main from \"./components/MainComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}